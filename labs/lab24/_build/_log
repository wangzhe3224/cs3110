### Starting build.
# Target: loop.ml.depends, tags: { package(async), package(core), ppx(ppx-jane -as-ppx), bin_annot, debug, extension:ml, file:loop.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package async -package core -ppx 'ppx-jane -as-ppx' -modules loop.ml > loop.ml.depends
# Target: loop.cmo, tags: { package(async), package(core), ppx(ppx-jane -as-ppx), bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:loop.cmo, file:loop.ml, implem, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -bin-annot -short-paths -thread -package async -package core -ppx 'ppx-jane -as-ppx' -o loop.cmo loop.ml
+ ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -bin-annot -short-paths -thread -package async -package core -ppx 'ppx-jane -as-ppx' -o loop.cmo loop.ml
File "loop.ml", line 15, characters 4-12:
15 |   | `OK line -> printf "%s\n" line
         ^^^^^^^^
Error: This pattern matches values of type [? `OK of 'a ]
       but a pattern was expected which matches values of type
         string Reader.Read_result.t
       The second variant type does not allow tag(s) `OK
Command exited with code 2.
# Compilation unsuccessful.
